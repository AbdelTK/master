# Default values for elk-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: "elk-stack"
fullnameOverride: "elk-stack-chart"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "elk-stack"

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Kibana configurations
kibana:
  image: "docker.elastic.co/kibana/kibana:7.10.1"
  replicas: 1
  service:
    type: NodePort
    port: 5601
    nodePort: 31084  # Specify the NodePort value

# Logstash configurations
logstash:
  image: "docker.elastic.co/logstash/logstash:7.10.1"
  replicas: 1
  service:
    type: ClusterIP
    port: 5044

# Nginx configurations
nginx:
  image: "nginx:latest"
  replicas: 1
  service:
    type: LoadBalancer
    port: 80

# Elasticsearch configurations
elasticsearch:
  image: "docker.elastic.co/elasticsearch/elasticsearch:7.10.1"
  replicas: 1
  service:
    type: ClusterIP
    port: 9200
  volumeClaimTemplate:
    storage: "10Gi"

# Persistent Volume and Persistent Volume Claim configurations
pvc:
  accessModes: ["ReadWriteOnce"]
  storage: "10Gi"

# Redis configurations
#redis:
 # image: "redis:latest"
  #service:
   # type: ClusterIP
    #port: 6379

# NFS Provisioner configurations
nfsProvisioner:
  server: 100.29.128.153
  path: /var/nfs/general
  storageClass:
    create: true
    name: nfs-client
    accessModes: ["ReadWriteOnce"]
    reclaimPolicy: Retain
    volumeBindingMode: Immediate
